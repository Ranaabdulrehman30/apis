name: Azure Functions CodeQL Scan

on:
  push:
    tags:
      - '*'
    branches:
      - main
  workflow_dispatch:

permissions:
  id-token: write
  contents: read
  security-events: write  # Added for code scanning

env:
  PYTHON_VERSION: '3.11'
  DEPLOYMENT_BRANCH: 'main'

jobs:
  code-scan:
    name: CodeQL Security Scanning
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Fetch all history

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: python

      - name: Perform CodeQL Analysis
        id: codeql-analyze
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:python"
          output: sarif-results

      # Export the CodeQL results to a report file
      - name: Generate CodeQL Report
        run: |
          mkdir -p codeql-reports
          DATE=$(date +"%Y-%m-%d")
          # Copy the SARIF results
          cp sarif-results/*.sarif codeql-reports/codeql-results-$DATE.sarif
          
          # Generate a human-readable summary if sarif file exists
          if [ -f "$(find sarif-results -name '*.sarif' | head -1)" ]; then
            python3 -c '
import json
import glob
import os

sarif_files = glob.glob("sarif-results/*.sarif")
if not sarif_files:
    print("No SARIF files found")
    exit(0)

with open(sarif_files[0]) as f:
    data = json.load(f)

summary = []
total_alerts = 0

for run in data.get("runs", []):
    tool_name = run.get("tool", {}).get("driver", {}).get("name", "Unknown")
    results = run.get("results", [])
    total_alerts += len(results)
    
    severity_counts = {"error": 0, "warning": 0, "note": 0}
    for result in results:
        severity_counts[result.get("level", "note")] += 1
    
    summary.append(f"Tool: {tool_name}")
    summary.append(f"  Total alerts: {len(results)}")
    summary.append(f"  Critical/Errors: {severity_counts['error']}")
    summary.append(f"  Warnings: {severity_counts['warning']}")
    summary.append(f"  Notes: {severity_counts['note']}")
    
    # Group by rule ID
    rule_counts = {}
    for result in results:
        rule_id = result.get("ruleId", "unknown")
        if rule_id in rule_counts:
            rule_counts[rule_id] += 1
        else:
            rule_counts[rule_id] = 1
    
    if rule_counts:
        summary.append("  Alerts by rule:")
        for rule_id, count in rule_counts.items():
            summary.append(f"    {rule_id}: {count}")

with open("codeql-reports/summary-" + os.environ["DATE"] + ".txt", "w") as f:
    f.write(f"CodeQL Analysis Summary for {os.environ['GITHUB_REPOSITORY']} - {os.environ['DATE']}\n")
    f.write("=" * 80 + "\n\n")
    f.write(f"Total alerts across all tools: {total_alerts}\n\n")
    f.write("\n".join(summary))
'
          else
            echo "No SARIF files found to generate summary" > codeql-reports/summary-$DATE.txt
          fi

      # Store CodeQL reports as GitHub artifacts
      - name: Store CodeQL Reports
        uses: actions/upload-artifact@v3
        with:
          name: codeql-security-reports-${{ github.sha }}
          path: codeql-reports/
          retention-days: 90

      # Store the raw CodeQL database as GitHub artifact
      - name: Store CodeQL Database
        uses: actions/upload-artifact@v3
        with:
          name: codeql-database-${{ github.sha }}
          path: /home/runner/work/_temp/codeql_databases
          retention-days: 90

  deploy:
    name: Deploy Azure Function
    needs: code-scan  # Wait for code scanning to complete before deploying
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - function_name: "uat1-deleteapi"
            path: "delete-api"
            tag_identifier: "delete-api"
 
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Fetch all history for tags

      - name: Extract tag info
        id: tag-info
        run: |
          TAG_NAME="${GITHUB_REF#refs/tags/}"
          FUNCTION_ID=$(echo $TAG_NAME | cut -d'-' -f2-)
          echo "function_id=$FUNCTION_ID" >> $GITHUB_OUTPUT
          echo "Extracted tag name: $TAG_NAME"
          echo "Extracted function ID: $FUNCTION_ID"

      - name: Verify tag is on main branch
        run: |
          git fetch origin main
          if git branch -r --contains ${{ github.ref }} | grep -q "origin/main"; then
            echo "Tag is on main branch"
          else
            echo "Tag must be on the main branch"
            exit 1
          fi

      - name: Setup Python
        if: matrix.tag_identifier == steps.tag-info.outputs.function_id
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        if: matrix.tag_identifier == steps.tag-info.outputs.function_id
        run: |
          if [ -f "${{ matrix.path }}/requirements.txt" ]; then
            pip install -r ${{ matrix.path }}/requirements.txt
          fi

      - name: Login to Azure
        if: matrix.tag_identifier == steps.tag-info.outputs.function_id
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Deploy Function
        if: matrix.tag_identifier == steps.tag-info.outputs.function_id
        uses: azure/functions-action@v1
        with:
          app-name: ${{ matrix.function_name }}
          package: ${{ matrix.path }}